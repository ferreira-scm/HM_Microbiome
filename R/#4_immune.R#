library("MCMCglmm")
library(ape)
library(brms)
library(rstan)
library(RColorBrewer) # needed for some extra colours in one of the graphs
library(ggmcmc)
library(ggthemes)
library(ggridges)
library(vegan)
library(phyloseq)

PS.TSS <- readRDS("tmp/PS.TSS_filtered.rds")

Eim <- subset_taxa(PS.TSS, Genus%in% "Eimeria")

### questions to answer:
# How does immne gene expression interact with host genetics and parasite/microbiome structre

### Approach 1

# subsetting
PS.i <- subset_samples(PS.TSS, !is.na(PS.TSS@sam_data$TNF))
Eim.i <- subset_samples(Eim, !is.na(Eim@sam_data$TNF))

Parasite <- subset_taxa(PS.i, Genus %in%c("Eimeria", "Cryptosporidium", "Syphacia", "Aspiculuris", "Ascaridida", "Mastophorus","Trichuris", "Hymenolepis", "Tritrichomonas"))

Fungi <- subset_taxa(PS.i, Phylum %in% c("Mucoromycota", "Ascomycota", "Basidiomycota"))

# now saving ID names
key <- data.frame(ID=sample_data(PS.i)$Mouse_ID)
# metadata
metadt <- sample_data(PS.i)

## 1) Jaccard distance
JACM <- as.matrix(phyloseq::distance(PS.i, method="jaccard", type="samples"))
# transpose Jaccard disssimilary matrix to Jaccard similarty matrix
JACM <- 1-JACM
# sanity check
all(rownames(JACM)==key)
dimnames(JACM)<- c(key, key)

## 1) Chisq distance
CHIM <- as.matrix(vegan::vegdist(PS.i@otu_table, method="chisq"))
# transpose Chi square disssimilary matrix to similarty matrix
CHIM <- 1-CHIM
# sanity check
all(rownames(CHIM)==key)
dimnames(CHIM)<- c(key, key)


## 1) Jaccard distance for eimeria
EJACM <- as.matrix(phyloseq::distance(Eim.i, method="jaccard", type="samples"))
# transpose Jaccard disssimilary matrix to Jaccard similarty matrix
EJACM <- 1-EJACM
# sanity check
all(rownames(EJACM)==key)
dimnames(EJACM)<- c(key, key)

## 1) Chisq distance
ECHIM <- as.matrix(vegan::vegdist(Eim.i@otu_table, method="chisq"))
# transpose Chi square disssimilary matrix to similarty matrix
ECHIM <- 1-ECHIM
# sanity check
all(rownames(ECHIM)==key)
dimnames(ECHIM)<- c(key, key)


## 1) Jaccard distance
JacP <- as.matrix(phyloseq::distance(Parasite, method="jaccard", type="samples"))
# transpose Jaccard disssimilary matrix to Jaccard similarty matrix
JacP <- 1-JacP
# sanity check
all(rownames(JacP)==key)
dimnames(JacP)<- c(key, key)


## 1) Jaccard distance
JacF <- as.matrix(phyloseq::distance(Fungi, method="jaccard", type="samples"))
# transpose Jaccard disssimilary matrix to Jaccard similarty matrix
JacF <- 1-JacF
# sanity check
all(rownames(JacF)==key)
dimnames(JacF)<- c(key, key)


## 1) Chisq distance
CHIMP <- as.matrix(vegan::vegdist(Parasite@otu_table, method="chisq"))
# transpose Chi square disssimilary matrix to similarty matrix
CHIMP <- 1-CHIMP
# sanity check
all(rownames(CHIMP)==key)
dimnames(CHIMP)<- c(key, key)


# distance matrix, we need to control for distance?
distance.df <- metadt[,c("Mouse_ID", "Longitude", "Latitude")]
SPATM <- array(NA, c(length(distance.df$Mouse_ID),length(distance.df$Mouse_ID)))
# derive matrix with spatial distances between each location
for (i in 1:length(distance.df$Mouse_ID)){
    for (j in 1:length(distance.df$Mouse_ID))
    {SPATM[i,j]= sqrt((abs(distance.df$Longitude[i]-distance.df$Longitude[j]))^2+
                      (abs(distance.df$Latitude[i]-distance.df$Latitude[j]))^2)
    }
}
dimnames(SPATM)<- c(key, key)

# 2) pairwise genetic distance based on genetic data
# I actually need to get this from sota again
sota <- read.csv("https://raw.githubusercontent.com/derele/Mouse_Eimeria_Field/master/data_products/SOTA_Data_Product.csv")
sota <- sota[sota$Mouse_ID%in%distance.df$Mouse_ID,c(1,6:25)]
sota <- sota[match(distance.df$Mouse_ID, sota$Mouse_ID),]
all(sota$Mouse_ID==distance.df$Mouse_ID)
rownames(sota) <- sota$Mouse_ID
sota$Mouse_ID <- NULL
gen.dis <- dist.gene(sota, method = "pairwise", pairwise.deletion = TRUE)
gen.dis <- as.matrix(gen.dis)
dimnames(gen.dis) <- c(key, key)

# 3) Making immune gene ex distances
#Create data frame with each sample name (character) and sampling time (numeric)
immune <- c("IFNy", "CXCR3", "IL.6", "IL.13", "IL1RN", "CASP1", "CXCL9", "IDO1", "IRGM1", "MPO", "MUC2", "MUC5AC", "MYD88", "NCR1", "PRF1", "RETNLB", "SOCS1", "TICAM1", "TNF")
IMM <- as.matrix(vegdist(metadt[,immune], method="euclidean"))
# transpose disssimilary matrix to similarty matrix
IMM <- 1-IMM
# sanity check
all(rownames(IMM)==key)
dimnames(IMM)<- c(key, key)

# 4) Making BMI distances
#Create data frame with each sample name (character) and sampling time (numeric)
BMI_frame<-metadt[,c("Mouse_ID", "BMI")]
#Create an empty matrix to fill with distances
BMIM<-array(0,c(nrow(BMI_frame),nrow(BMI_frame)))
#Derive matrix with time distances between each sample using abs()-function
for (i in 1:nrow(BMI_frame)){
    for (j in 1:nrow(BMI_frame))
    {BMIM[i,j]=abs(BMI_frame$BMI[i] -BMI_frame$BMI[j])
    }
}
dimnames(BMIM) <- c(key, key)

# 6) Create farm/Locality matrix: 
#Create data frame with each Individual name (character) and their Age (Character)
Loc_frame<-metadt[,c("Mouse_ID","Locality")]
#Create an empty numeric matrix to fill with distances
LocM<-array(0,c(nrow(Loc_frame),nrow(Loc_frame)))
#Derive matrix with binary locality similarity between each sample
for(i in 1:nrow(Loc_frame)){
    for(j in 1:nrow(Loc_frame)){
        if(Loc_frame$Locality[i]==Loc_frame$Locality[j]){
            LocM[i,j]= "1"
        } else{
            LocM[i,j]= "0"
        }
    }
}
#Note that farm similarity matrix has rownames and colnames in the same order as key
all(rownames(LocM)==key$ID)
dimnames(LocM) <- c(key, key)

# 7) Making HI distances
#Create data frame with each sample name (character) and sampling time (numeric)
HI_frame<-metadt[,c("Mouse_ID", "HI")]
#Create an empty matrix to fill with distances
HIM<-array(0,c(nrow(HI_frame),nrow(HI_frame)))
#Derive matrix with time distances between each sample using abs()-function
for (i in 1:nrow(HI_frame)){
    for (j in 1:nrow(HI_frame))
    {HIM[i,j]=abs(HI_frame$HI[i] -HI_frame$HI[j])
    }
}
dimnames(HIM) <- c(key, key)

# 7) Making hibridicity distances
#Create data frame with each sample name (character) and sampling time (numeric)
hi_frame<-metadt[,c("Mouse_ID", "hi")]
#Create an empty matrix to fill with distances
hiM<-array(0,c(nrow(hi_frame),nrow(hi_frame)))
#Derive matrix with time distances between each sample using abs()-function
for (i in 1:nrow(hi_frame)){
    for (j in 1:nrow(hi_frame))
    {hiM[i,j]=abs(hi_frame$hi[i] -hi_frame$hi[j])
    }
}
dimnames(hiM) <- c(key, key)

## 3) Sex pairs
Sex_frame<-metadt[,c("Mouse_ID","Sex")]
Sex_frame$Mouse_ID<-as.character(Sex_frame$Mouse_ID)
Sex_frame$Sex<-as.character(Sex_frame$Sex)
#Create an empty character matrix to fill with characters
SEXM<-array(as.character(NA),c(nrow(Sex_frame),nrow(Sex_frame)))
for(i in 1:nrow(Sex_frame)){
    for(j in 1:nrow(Sex_frame)){
        if(Sex_frame$Sex[i]=="F" & Sex_frame$Sex[i]==Sex_frame$Sex[j]){
            SEXM[i,j]= "FF"}
        if(Sex_frame$Sex[i]=="M" & Sex_frame$Sex[i]==Sex_frame$Sex[j]){
           SEXM[i,j]= "MM"}
        if( Sex_frame$Sex[i]!=Sex_frame$Sex[j]){
            SEXM[i,j]= "FM"}
    }
}
dimnames(SEXM)<-c(key, key)
# 6) this matrix will describe the distance in years between samples
#Transform dates into a numeric variable
metadt$Year <- as.numeric(metadt$Year)
#Create data frame with each sample name (character) and sampling time (numeric)
SampleTime_frame<-metadt[,c("Mouse_ID","Year")]
#Create an empty matrix to fill with distances
TEMPM<-array(0,c(nrow(SampleTime_frame),nrow(SampleTime_frame)))
#Derive matrix with time distances between each sample using abs()-function
for (i in 1:nrow(SampleTime_frame)){
 for (j in 1:nrow(SampleTime_frame))
{TEMPM[i,j]=abs(SampleTime_frame$Year[i] -SampleTime_frame$Year[j])
  }
}
dimnames(TEMPM)<-c(key,key)


chi<-c(as.dist(CHIM))
chiP<-c(as.dist(CHIMP))
jac<-c(as.dist(JACM))
jacP<-c(as.dist(JacP))
jacF<-c(as.dist(JacF))
echi<-c(as.dist(ECHIM))
ejac<-c(as.dist(EJACM))
bmi<-c(as.dist(BMIM))
spa<-c(as.dist(SPATM))
imm<-c(as.dist(IMM))
gen<-c(as.dist(gen.dis))
loc <- as.character(c(as.dist(LocM)))
HIm <- c(as.dist(HIM))
him <- c(as.dist(hiM))
tempm <- c(as.dist(TEMPM))
sex<-c(SEXM[lower.tri(SEXM)])


#Combine these vectors into a data frame
data.dyad<-data.frame(Immune=imm, BMI=bmi, Microbiome_similarity=jac, spatial=spa,
                      genetic_dist=gen, locality=loc, HI_dist=HIm, hi_dist=him, hi=him, year=tempm, sex=sex, ParasiteChi=chiP, Microbiome_chi=chi, ParasiteJac=jacP, FungiJac=jacF, EimeriaJ=ejac, EimeriaC=echi)

#Now all we need to do is add the identities of both individuals in each dyad as separate columns into the data frame and exclude self-comparisons (as these are not meaningful).

# extracting Individual-combinations present in the matrices
list<-expand.grid(key$ID, key$ID)

str(list)

# This created individual-to-same-individual pairs as well. Get rid of these:
list<-list[which(list$Var1!=list$Var2),]

# this still has both quantiles in--> add 'unique' key
list$key <- apply(list, 1, function(x)paste(sort(x), collapse=''))
list<-subset(list, !duplicated(list$key))

# sanity check that the Individual name combinations are in the same exact order as the lower quantile value vector of the matrices
i=nrow(key)
JACM[which(rownames(JACM)==list$Var1[i]),which(colnames(JACM)==list$Var2[i])]==jac[i]

# add the names of both individuals participating in each dyad into the data frame
data.dyad$IDA<-list$Var2
data.dyad$IDB<-list$Var1
# Make sure you have got rid of all self comparisons
data.dyad<-data.dyad[which(data.dyad$IDA!=data.dyad$IDB),]

######################### Now we model the data ####################
#scale all predictors to range between 0-1 if they are not already naturally on that scale
#define scaling function:
range.use <- function(x,min.use,max.use){ (x - min(x,na.rm=T))/(max(x,na.rm=T)-min(x,na.rm=T)) * (max.use - min.use) + min.use }
scalecols<-c("spatial","genetic_dist", "BMI", "Immune", "hi", "year")
for(i in 1:ncol(data.dyad[,which(colnames(data.dyad)%in%scalecols)])){
    data.dyad[,which(colnames(data.dyad)%in%scalecols)][,i]<-range.use(data.dyad[,which(colnames(data.dyad)%in%scalecols)][,i],0,1)
    }


#### model
modeli<-brm(Microbiome_similarity~1+ spatial+locality+BMI+genetic_dist*hi+ Immune+year+sex+
                (1|mm(IDA,IDB)),
                data = data.dyad,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 20, chains = 4,
                inits=0)

Emodeli<-brm(EimeriaJ~1+ spatial+locality+BMI+genetic_dist*hi+ Immune+year+sex+
                (1|mm(IDA,IDB)),
                data = data.dyad,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 20, chains = 4,
                inits=0)

Emodeli

Emodelii<-brm(EimeriaC~1+ spatial+locality+BMI+genetic_dist*hi+ Immune+year+sex+
                (1|mm(IDA,IDB)),
                data = data.dyad,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 20, chains = 4,
                inits=0)

Emodelii

modeliF<-brm(FungiJac~1+ spatial+locality+ Immune+
                (1|mm(IDA,IDB)),
                data = data.dyad,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 20, chains = 4,
                inits=0)

modeliP<-brm(ParasiteJac~1+ spatial+locality+ Immune+
                (1|mm(IDA,IDB)),
                data = data.dyad,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 20, chains = 4,
                inits=0)
modeliP2<-brm(ParasiteChi~1+ spatial+locality+ Immune+
                (1|mm(IDA,IDB)),
                data = data.dyad,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 20, chains = 4,
                inits=0)

modeliF

saveRDS(modeli, "tmp/BRMmodeli.rds")

modeli.c<-brm(Microbiome_chi~1+ spatial+locality+BMI+genetic_dist*hi+ Immune+year+sex+
                (1|mm(IDA,IDB)),
                data = data.dyad,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 20, chains = 4,
                inits=0)
saveRDS(modeli.c, "tmp/BRMmodeli_chi.rds")

modeli.c

modeli

modeli <- readRDS("tmp/BRMmodeli.rds")

modelimm<-brm(Immune~1+ BMI+genetic_dist+hi+Microbiome_similarity+
                (1|mm(IDA,IDB)),
                data = data.dyad,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 50, chains = 4,
              inits=0)


modelimm2<-brm(Immune~1+ BMI+genetic_dist+hi+FungiJac+ParasiteJac+
                (1|mm(IDA,IDB)),
                data = data.dyad,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 50, chains = 4,
              inits=0)

modelimm2

modelimm.c<-brm(Immune~1+ BMI+genetic_dist+hi+Microbiome_chi+
                (1|mm(IDA,IDB)),
                data = data.dyad,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 50, chains = 4,
              inits=0)

modelimm.c <- brm(Immune~1+ BMI+genetic_dist+hi+F+
                (1|mm(IDA,IDB)),
                data = data.dyad,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 50, chains = 4,
              inits=0)





modelimm <- add_criterion(modelimm, "loo")
saveRDS(modelimm, "tmp/BRMmodelimm.rds")
#
#modelimm <- readRDS("tmp/BRMmodelimm.rds")
#
modelimmHI<-brm(Immune~1+ BMI+HI_dist+hi+Microbiome_similarity+
                (1|mm(IDA,IDB)),
                data = data.dyad,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 50, chains = 4,
                inits=0)
modelimmHI <- add_criterion(modelimmHI, "loo")
saveRDS(modelimmHI, "tmp/BRMmodelimmHI.rds")

modelimmHI <- readRDS("tmp/BRMmodelimmHI.rds")

modeli <- readRDS("tmp/BRMmodeli.rds")

modelimm <- add_criterion(modelimm, "loo")
modelimmHI <- add_criterion(modelimmHI, "loo")
loo_compare(modelimm, modelimmHI)

modelimmHI

modelimm2<-brm(Immune~1+ BMI+genetic_dist+hi+
                (1|mm(IDA,IDB)),
                data = data.dyad,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 50, chains = 4,
                inits=0)


add_criterion(modelimm2, "loo")


modelimmHI

modelimm2

modelimm_transformed <- ggs(modelimm)

conditional_effects(modelimm)

mcmc_plot(modelimm,
                type = "intervals",
                prob = 0.95,
                pars= rownames(fixef(modelimm))[2:nrow(fixef(modelimm))])


loo_compare(modelimmHI, modelimm)




modelimm

#model_i<-brm(Immune~1+ BMI+genetic_dist+Parasite+Microbiome_similarity+
#                (1|mm(IDA,IDB)),
#                data = data.dyad,
#                family= "gaussian",
#                warmup = 1000, iter = 3000,
#                cores = 50, chains = 10,
#                inits=0)
#saveRDS(model_i, "tmp/BRMmodel_i.rds")
model_i <- readRDS("tmp/BRMmodel_i.rds")

#model_ii<-brm(Immune~1+ BMI+genetic_dist+Parasite+Microbiome_similarity+locality+
#                (1|mm(IDA,IDB)),
#                data = data.dyad,
#                family= "gaussian",
#                warmup = 1000, iter = 3000,
#                cores = 50, chains = 10,
#                inits=0)
#saveRDS(model_ii, "tmp/BRMmodel_ii.rds")
model_ii <- readRDS("tmp/BRMmodel_ii.rds")



modeli

model_ii

resdf1<-summary(modeli)$fixed
resdf1<-as.data.frame(resdf1)
resdf1<-resdf1[c("Estimate","l-95% CI","u-95% CI")]
resdf1<-resdf1[2:nrow(resdf1),]
resdf1$Predictor<-rownames(resdf1)
colnames(resdf1)<-c("Estimate","lCI","uCI","Predictor")
resdf1$Predictor<-factor(resdf1$Predictor)

plot2<-ggplot(resdf1,aes(x=Estimate,y=Predictor,colour=Predictor))+
    geom_linerange(aes(xmin = lCI, xmax = uCI),size=2.5)+
    geom_point(size=4,colour="black", shape=21, fill="white")+
    theme_bw()+
    theme(legend.position='none',text = element_text(size=22))+
    labs(x="Effect on immune structure",y="")+
    geom_vline(xintercept=0, linetype="dashed")

plot2

#################### Eimeria immune

heatmap(cor(metadt[,immune]))

cor(metadt[,immune])


#### testing some stuff



## testing now the Anna Karenina principle: each dysbiotic community is dysbiotic on its own way
PS.mP@sam_data$Co_infb <- as.factor(PS.mP@sam_data$Co_infb)

immuneT <- metadt[,immune]

library(cluster)

model=kmeans(immuneT, 3)

clusplot(immuneT, model$cluster)

dis <- vegdist(immuneT, method="euclidean")

dis2 <- stepacross(dis, path="extended")

I.ord <- metaMDS(immuneT, "euclidean", trymax = 500)

I.rda <- rda(immuneT, data=metadt, scaling="species")

names(metadt)

parasite <- Parasite@otu_table

colnames(parasite) <- Parasite@tax_table[,7]




parasite

parasite_euc <- rda(parasite)

parasite_euc$CA

ordiplot(parasite_euc, display=c("sites", "species"))

orditorp(parasite_euc, display="species")

P.rda <- rda(immuneT, data=metadt, scaling="species")

metadt$Immune_PCA1 <- I.rda$CA$u[,1]
metadt$Immune_PCA2 <- I.rda$CA$u[,2]
metadt$Immune_PCA3 <- I.rda$CA$u[,3]
metadt$para_PCA1 <- parasite_euc$CA$u[,1]
metadt$para_PCA2 <- parasite_euc$CA$u[,2]
metadt$para_PCA3 <- parasite_euc$CA$u[,3]

model_Eimf<-brm(Eimeria_ferrisi_asv~1+ BMI+HI+Immune_PCA1+Immune_PCA2+Immune_PCA3+
                (1|Locality),
                data = metadt,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 50, chains = 4,
                inits=0)
saveRDS(model_Eimf, "tmp/BRMmodel_Eimf.rds")
#
model_Para1<-brm(para_PCA1~1+ BMI+HI+Immune_PCA1+Immune_PCA2+Immune_PCA3+
                (1|Locality),
                data = metadt,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 50, chains = 4,
                inits=0)
saveRDS(model_Para1, "tmp/BRMmodel_Para1.rds")
#
model_Para2<-brm(para_PCA2~1+ BMI+HI+Immune_PCA1+Immune_PCA2+Immune_PCA3+
                (1|Locality),
                data = metadt,
                family= "gaussian",
                warmup = 1000, iter = 3000,
                cores = 50, chains = 4,
                inits=0)
saveRDS(model_Para2, "tmp/BRMmodel_Para2.rds")


model_Eimf

model_Para2

head(I.rda)

I.cca <- cca(immuneT~Co_infb, data=metadt)

fit <- envfit(I.cca~metadt$Co_infb, perm=999, display="lc")

plot(fit, p.max=0.05)

summary(I.rda)

plot2 <- ordiplot(I.rda, choices=c(1,2))

plot2

ordiellipse(plot2, groups=Co_infb, display="sites")

biplot(I.rda,
       display=c("sites"))

co.names <- levels(metadt$Co_infb)

ordihull(I.rda,
         group = metadt$Co_infb,
         col = c(1,2,3))

legend("topright",
       col = c(1,2,3),
       lty = 1,
              legend = co.names)

class(metadt) <- "data.frame"

groups <- metadt$Co_infb
mod <- betadisper(dis, groups)

anova(mod) # the dispersion is not different between groups

plot(mod, hull=FALSE, ellipse=TRUE)

boxplot(mod) # the dispersion is not different between groups

mod.HSD <- TukeyHSD(mod)

plot(mod.HSD)# the dispersion is not different between groups


sppscores(I.ord) <- immuneT

plot(I.ord)

p1=plot_ordination(PS.mP, PS.ord, type="sample", color="Co_infb")

p1+
    scale_color_manual(labels=c("uninfected", "single parasite", "multiple parasites"), values = c("wheat", "tomato", "tomato4"))+
    labs(color="Parasite infection")+
    theme_bw()+
    stat_ellipse(aes(group=PS.mP@sam_data$Co_infb)) 

