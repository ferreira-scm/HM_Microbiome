library(Hmsc)
library(snow)
library(corrplot)

library(metagMisc)

PS.TSS <- readRDS("tmp/PS.TSS_filtered.rds")
PS.TSS <- phyloseq_standardize_otu_abundance(PS.TSS, method="pa")

# Environment features (host is the environment)
metadata <- as.data.frame(PS.TSS@sam_data)
class(metadata) <- "data.frame"

X=metadata[,c("hi", "Sex", "BMI")]
XFormula <- ~hi+Sex+BMI

# Species occurrence box
Y <- as.matrix(PS.TSS@otu_table)
class(Y) <- "matrix"

### this is annoying, but apparently we need :
#All spatial locations should be unique. If you have several observations in the same point, they should be identified by the random levels.'
lev <- unique(metadata$Longitude)
for (i in 1:length(lev)){
#length(grep(lev[2], metadata$Longitude))
    metadata$Longitude[which(metadata$Longitude%in%lev[i])] <- paste(metadata$Longitude[which(metadata$Longitude==lev[i])], seq(1:length(grep(lev[i], metadata$Longitude))), sep="")
}

lev <- unique(metadata$Longitude)
for (i in 1:length(lev)){
#length(grep(lev[2], metadata$Longitude))
    metadata$Longitude[which(metadata$Longitude%in%lev[i])] <- paste(metadata$Longitude[which(metadata$Longitude==lev[i])], seq(1:length(grep(lev[i], metadata$Longitude))), sep="")
}

lev <- unique(metadata$Latitude)
for (i in 1:length(lev)){
#length(grep(lev[2], metadata$Longitude))
    metadata$Latitude[which(metadata$Latitude%in%lev[i])] <- paste(metadata$Latitude[which(metadata$Latitude==lev[i])], seq(1:length(grep(lev[i], metadata$Latitude))), sep="")
}

lev <- unique(metadata$Latitude)
for (i in 1:length(lev)){
#length(grep(lev[2], metadata$Longitude))
    metadata$Latitude[which(metadata$Latitude%in%lev[i])] <- paste(metadata$Latitude[which(metadata$Latitude==lev[i])], seq(1:length(grep(lev[i], metadata$Latitude))), sep="")
}

metadata$Longitude <- as.numeric(metadata$Longitude)
metadata$Latitude <- as.numeric(metadata$Latitude)

metadata$Locality <- paste(metadata$Longitude, metadata$Latitude, sep=" ")

xy <- as.matrix(cbind(metadata$Longitude, metadata$Latitude))
colnames(xy) <- c("Latitude", "Longitude")
rownames(xy) <- metadata$Locality

# study design
studyDesign <- metadata[,c("Year", "Locality")]
studyDesign$Year <- as.factor(studyDesign$Year)
studyDesign$Locality <- as.factor(studyDesign$Locality)

rL1=HmscRandomLevel(sData=xy)

rL2=HmscRandomLevel(units=studyDesign$Year)

ranlevels=list(Locality=rL1, Year=rL2)
ranlevels

jModel <- Hmsc(Y=Y, XData=X,
               XFormula=XFormula,
               studyDesign=studyDesign,
               ranLevels=ranlevels,
               distr="probit")

thin=50
samples=1000
nChains=4
transient=5000

mod_HMDC <- sampleMcmc(jModel,
                       samples=samples,
                       thin=thin,
                       transient=transient,
                       nChains=nChains,
                       nParallel=nChains)

mcoda <- convertToCodaObject(mod_HMDC)

#par(mar=rep(2,4))
plot(mcoda$Beta[,1:5])

plot(mcoda$Gamma)

gelman.diag(mcoda$Beta[,1:50])

postBeta=getPostEstimate(mod_HMDC, parName="Beta")

plotBeta(mod_HMDC,
         post=postBeta,
         plotTree=F,
         spNamesNumbers=c(T,F))

plotBeta(mod_HMDC,
         post=postBeta,
         param="Mean",
         plotTree=F,
         spNamesNumbers=c(T,F))

VP=computeVariancePartitioning(mod_HMDC)

plotVariancePartitioning(mod_HMDC, VP=VP, las=2, horiz=F)
